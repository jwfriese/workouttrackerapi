// This file was generated by counterfeiter
package repositoryfakes

import (
	"sync"

	"github.com/jwfriese/workouttrackerapi/lifts/sets/datamodel"
	"github.com/jwfriese/workouttrackerapi/lifts/sets/repository"
)

type FakeSetRepository struct {
	GetByIdStub        func(id int) (*datamodel.Set, error)
	getByIdMutex       sync.RWMutex
	getByIdArgsForCall []struct {
		id int
	}
	getByIdReturns struct {
		result1 *datamodel.Set
		result2 error
	}
	InsertStub        func(set *datamodel.Set) (int, error)
	insertMutex       sync.RWMutex
	insertArgsForCall []struct {
		set *datamodel.Set
	}
	insertReturns struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSetRepository) GetById(id int) (*datamodel.Set, error) {
	fake.getByIdMutex.Lock()
	fake.getByIdArgsForCall = append(fake.getByIdArgsForCall, struct {
		id int
	}{id})
	fake.recordInvocation("GetById", []interface{}{id})
	fake.getByIdMutex.Unlock()
	if fake.GetByIdStub != nil {
		return fake.GetByIdStub(id)
	} else {
		return fake.getByIdReturns.result1, fake.getByIdReturns.result2
	}
}

func (fake *FakeSetRepository) GetByIdCallCount() int {
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	return len(fake.getByIdArgsForCall)
}

func (fake *FakeSetRepository) GetByIdArgsForCall(i int) int {
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	return fake.getByIdArgsForCall[i].id
}

func (fake *FakeSetRepository) GetByIdReturns(result1 *datamodel.Set, result2 error) {
	fake.GetByIdStub = nil
	fake.getByIdReturns = struct {
		result1 *datamodel.Set
		result2 error
	}{result1, result2}
}

func (fake *FakeSetRepository) Insert(set *datamodel.Set) (int, error) {
	fake.insertMutex.Lock()
	fake.insertArgsForCall = append(fake.insertArgsForCall, struct {
		set *datamodel.Set
	}{set})
	fake.recordInvocation("Insert", []interface{}{set})
	fake.insertMutex.Unlock()
	if fake.InsertStub != nil {
		return fake.InsertStub(set)
	} else {
		return fake.insertReturns.result1, fake.insertReturns.result2
	}
}

func (fake *FakeSetRepository) InsertCallCount() int {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return len(fake.insertArgsForCall)
}

func (fake *FakeSetRepository) InsertArgsForCall(i int) *datamodel.Set {
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return fake.insertArgsForCall[i].set
}

func (fake *FakeSetRepository) InsertReturns(result1 int, result2 error) {
	fake.InsertStub = nil
	fake.insertReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeSetRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	fake.insertMutex.RLock()
	defer fake.insertMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeSetRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.SetRepository = new(FakeSetRepository)
