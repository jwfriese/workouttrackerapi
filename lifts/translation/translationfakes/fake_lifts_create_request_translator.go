// This file was generated by counterfeiter
package translationfakes

import (
	"sync"

	liftdatamodel "github.com/jwfriese/workouttrackerapi/lifts/datamodel"
	"github.com/jwfriese/workouttrackerapi/lifts/translation"
)

type FakeLiftsCreateRequestTranslator struct {
	TranslateStub        func(liftJSON []byte) (*liftdatamodel.Lift, error)
	translateMutex       sync.RWMutex
	translateArgsForCall []struct {
		liftJSON []byte
	}
	translateReturns struct {
		result1 *liftdatamodel.Lift
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLiftsCreateRequestTranslator) Translate(liftJSON []byte) (*liftdatamodel.Lift, error) {
	var liftJSONCopy []byte
	if liftJSON != nil {
		liftJSONCopy = make([]byte, len(liftJSON))
		copy(liftJSONCopy, liftJSON)
	}
	fake.translateMutex.Lock()
	fake.translateArgsForCall = append(fake.translateArgsForCall, struct {
		liftJSON []byte
	}{liftJSONCopy})
	fake.recordInvocation("Translate", []interface{}{liftJSONCopy})
	fake.translateMutex.Unlock()
	if fake.TranslateStub != nil {
		return fake.TranslateStub(liftJSON)
	} else {
		return fake.translateReturns.result1, fake.translateReturns.result2
	}
}

func (fake *FakeLiftsCreateRequestTranslator) TranslateCallCount() int {
	fake.translateMutex.RLock()
	defer fake.translateMutex.RUnlock()
	return len(fake.translateArgsForCall)
}

func (fake *FakeLiftsCreateRequestTranslator) TranslateArgsForCall(i int) []byte {
	fake.translateMutex.RLock()
	defer fake.translateMutex.RUnlock()
	return fake.translateArgsForCall[i].liftJSON
}

func (fake *FakeLiftsCreateRequestTranslator) TranslateReturns(result1 *liftdatamodel.Lift, result2 error) {
	fake.TranslateStub = nil
	fake.translateReturns = struct {
		result1 *liftdatamodel.Lift
		result2 error
	}{result1, result2}
}

func (fake *FakeLiftsCreateRequestTranslator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.translateMutex.RLock()
	defer fake.translateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLiftsCreateRequestTranslator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ translation.LiftsCreateRequestTranslator = new(FakeLiftsCreateRequestTranslator)
