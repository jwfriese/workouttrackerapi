// This file was generated by counterfeiter
package repositoryfakes

import (
	"sync"

	"github.com/jwfriese/workouttrackerapi/lifts/datamodel"
	"github.com/jwfriese/workouttrackerapi/lifts/repository"
)

type FakeLiftRepository struct {
	AllStub        func() []*datamodel.Lift
	allMutex       sync.RWMutex
	allArgsForCall []struct{}
	allReturns     struct {
		result1 []*datamodel.Lift
	}
	GetByIdStub        func(id string) *datamodel.Lift
	getByIdMutex       sync.RWMutex
	getByIdArgsForCall []struct {
		id string
	}
	getByIdReturns struct {
		result1 *datamodel.Lift
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLiftRepository) All() []*datamodel.Lift {
	fake.allMutex.Lock()
	fake.allArgsForCall = append(fake.allArgsForCall, struct{}{})
	fake.recordInvocation("All", []interface{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	} else {
		return fake.allReturns.result1
	}
}

func (fake *FakeLiftRepository) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeLiftRepository) AllReturns(result1 []*datamodel.Lift) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []*datamodel.Lift
	}{result1}
}

func (fake *FakeLiftRepository) GetById(id string) *datamodel.Lift {
	fake.getByIdMutex.Lock()
	fake.getByIdArgsForCall = append(fake.getByIdArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("GetById", []interface{}{id})
	fake.getByIdMutex.Unlock()
	if fake.GetByIdStub != nil {
		return fake.GetByIdStub(id)
	} else {
		return fake.getByIdReturns.result1
	}
}

func (fake *FakeLiftRepository) GetByIdCallCount() int {
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	return len(fake.getByIdArgsForCall)
}

func (fake *FakeLiftRepository) GetByIdArgsForCall(i int) string {
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	return fake.getByIdArgsForCall[i].id
}

func (fake *FakeLiftRepository) GetByIdReturns(result1 *datamodel.Lift) {
	fake.GetByIdStub = nil
	fake.getByIdReturns = struct {
		result1 *datamodel.Lift
	}{result1}
}

func (fake *FakeLiftRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	fake.getByIdMutex.RLock()
	defer fake.getByIdMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeLiftRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ repository.LiftRepository = new(FakeLiftRepository)
