// This file was generated by counterfeiter
package validationfakes

import (
	"sync"

	"github.com/jwfriese/workouttrackerapi/workouts/datamodel"
	"github.com/jwfriese/workouttrackerapi/workouts/validation"
)

type FakeWorkoutsCreateRequestValidator struct {
	ValidateStub        func([]byte) (*datamodel.Workout, error)
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 []byte
	}
	validateReturns struct {
		result1 *datamodel.Workout
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWorkoutsCreateRequestValidator) Validate(arg1 []byte) (*datamodel.Workout, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.validateMutex.Lock()
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	fake.recordInvocation("Validate", []interface{}{arg1Copy})
	fake.validateMutex.Unlock()
	if fake.ValidateStub != nil {
		return fake.ValidateStub(arg1)
	} else {
		return fake.validateReturns.result1, fake.validateReturns.result2
	}
}

func (fake *FakeWorkoutsCreateRequestValidator) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakeWorkoutsCreateRequestValidator) ValidateArgsForCall(i int) []byte {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.validateArgsForCall[i].arg1
}

func (fake *FakeWorkoutsCreateRequestValidator) ValidateReturns(result1 *datamodel.Workout, result2 error) {
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 *datamodel.Workout
		result2 error
	}{result1, result2}
}

func (fake *FakeWorkoutsCreateRequestValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeWorkoutsCreateRequestValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ validation.WorkoutsCreateRequestValidator = new(FakeWorkoutsCreateRequestValidator)
